# include "../ft_printf.h"
# include <stdio.h>
# include <unistd.h>
# include <string.h>
# include <assert.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

# define RESET	"\033[0m"
# define BOLD	"\033[1m"
# define RED		"\033[31m"
# define GREEN	"\033[32m"
# define YELLOW		"\033[33m"
# define BLUE	"\033[34m"
# define PURPLE		"\033[35m"
# define CYAN	"\033[36m"
# define WHITE	"\033[37m"
# define UNCOLOR	"\033[39m"

void	print_OK(int result)
{
	if (result != 0)
		printf(RED"KO!\n"UNCOLOR);
	else
		printf(GREEN"OK!\n"UNCOLOR);
}

void	print_result(int result, int mine)
{
	printf(CYAN"return expected [%d] : [%d]	"UNCOLOR, result, mine);
	print_OK(result - mine);
}

static void	compare_results_d(int number, char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		orig = printf("expect: [%d]\n", number);
		mine = ft_printf("output: [%d]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'i')
	{
		orig = printf("expect: [%i]\n", number);
		mine = ft_printf("output: [%i]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'u')
	{
		orig = printf("expect: [%u]\n", number);
		mine = ft_printf("output: [%u]\n", number);
		print_result(orig, mine);
	}
}

static void	compare_results_d_hh(signed char number, signed char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		printf(YELLOW"\nInput: [%c]\n"UNCOLOR, number);
		orig = printf("expect: [%hhd]\n", number);
		mine = ft_printf("output: [%hhd]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'i')
	{
		printf(YELLOW"\nInput: [%c]\n"UNCOLOR, number);
		orig = printf("expect: [%hhi]\n", number);
		mine = ft_printf("output: [%hhi]\n", number);
		print_result(orig, mine);
	}
}

static void	compare_results_d_h(short number, char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		printf(YELLOW"\nInput: [%hd]\n"UNCOLOR, number);
		orig = printf("expect: [%hd]\n", number);
		mine = ft_printf("output: [%hd]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'i')
	{
		printf(YELLOW"\nInput: [%hi]\n"UNCOLOR, number);
		orig = printf("expect: [%hi]\n", number);
		mine = ft_printf("output: [%hi]\n", number);
		print_result(orig, mine);
	}
}

static void	compare_results_d_l(long number, char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		printf(YELLOW"\nInput: [%ld]\n"UNCOLOR, number);
		orig = printf("expect: [%ld]\n", number);
		mine = ft_printf("output: [%ld]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'i')
	{
		printf(YELLOW"\nInput: [%ld]\n"UNCOLOR, number);
		orig = printf("expect: [%li]\n", number);
		mine = ft_printf("output: [%li]\n", number);
		print_result(orig, mine);
	}
}

static void	compare_results_d_ll(long long number, char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		printf(YELLOW"\nInput: [%lld]\n"UNCOLOR, number);
		orig = printf("expect: [%lld]\n", number);
		mine = ft_printf("output: [%lld]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'i')
	{
		printf(YELLOW"\nInput: [%lld]\n"UNCOLOR, number);
		orig = printf("expect: [%lli]\n", number);
		mine = ft_printf("output: [%lli]\n", number);
		print_result(orig, mine);
	}
}

static void	compare_results_hhu(unsigned char number)
{
	int orig;
	int mine;

	printf(YELLOW"\nInput: [%c]\n"UNCOLOR, number);
	orig = printf("expect: [%hhu]\n", number);
	mine = ft_printf("output: [%hhu]\n", number);
	print_result(orig, mine);
}

static void	compare_results_hu(unsigned short number)
{
	int orig;
	int mine;

	printf(YELLOW"\nInput: [%hu]\n"UNCOLOR, number);
	orig = printf("expect: [%hu]\n", number);
	mine = ft_printf("output: [%hu]\n", number);
	print_result(orig, mine);
}

static void	compare_results_lu(unsigned long number)
{
	int orig;
	int mine;

	printf(YELLOW"\nInput: [%lu]\n"UNCOLOR, number);
	orig = printf("expect: [%lu]\n", number);
	mine = ft_printf("output: [%lu]\n", number);
	print_result(orig, mine);
}

static void	compare_results_llu(unsigned long long number)
{
	int orig;
	int mine;

	printf(YELLOW"\nInput: [%llu]\n"UNCOLOR, number);
	orig = printf("expect: [%llu]\n", number);
	mine = ft_printf("output: [%llu]\n", number);
	print_result(orig, mine);
}

static void	d(void)
{
	int	orig;
	int	mine;

	// DECIMAL INTEGER (ASSUMES BASE 10)
	//assumes integer is a signed decimal number
	int	number = 5;

	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'd');

	number = 2147483647;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'd');

	number = -2147483648;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'd');

	number = -1234;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'd');

	number = 1234;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'd');

	number = -0;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'd');

	// difference between %d and %i
	printf(PURPLE"\ndifference between %%d and %%i TEST\n"UNCOLOR);
	number = 012;
	printf("\nInput: [012]\n");
	compare_results_d(number, 'd');

	number = 033;
	printf("\nInput: [033]\n");
	compare_results_d(number, 'd');

	/* 0 && WIDTH*/
	printf(YELLOW"\nInput: [%%05d] number: [%d]\n"UNCOLOR, 5);
	orig = printf("expect: [%05d]\n", 5);
	mine = ft_printf("output: [%05d]\n", 5);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%010d] number: [%d]\n"UNCOLOR, 20005);
	orig = printf("expect: [%010d]\n", 20005);
	mine = ft_printf("output: [%010d]\n", 20005);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%010d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [%010d]\n", 900999);
	mine = ft_printf("output: [%010d]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%05.d] number: [%u]\n"UNCOLOR, 0);
	orig = printf("expect: [%05.d]\n", 0);
	mine = ft_printf("output: [%05.d]\n", 0);
	print_result(orig, mine);

	/* space */
	printf(YELLOW"\nInput: [%% d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [% d]\n", 900999);
	mine = ft_printf("output: [% d]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%% 10d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [% 10d]\n", 900999);
	mine = ft_printf("output: [% 10d]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%% 010d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [% 010d]\n", 900999);
	mine = ft_printf("output: [% 010d]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%% +10d] number: [%d] space is ignored when + flag is present\n"UNCOLOR, 900999);
	orig = printf("expect: [%+10d]\n", 900999);
	mine = ft_printf("output: [% +10d]\n", 900999);
	print_result(orig, mine);

	/* - */
	printf(YELLOW"\nInput: [%%-010d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [%-10d]\n", 900999);
	mine = ft_printf("output: [%-010d]\n", 900999);
	print_result(orig, mine);

	/* + */
	printf(YELLOW"\nInput: [%%+d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [%+d]\n", 900999);
	mine = ft_printf("output: [%+d]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%+-010d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [%+-10d]\n", 900999);
	mine = ft_printf("output: [%+-010d]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%+-10d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [%+-10d]\n", 900999);
	mine = ft_printf("output: [%+-10d]\n", 900999);
	print_result(orig, mine);

	/* WIDTH */
	printf(YELLOW"\nInput: [%%100d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [%100d]\n", 900999);
	mine = ft_printf("output: [%100d]\n", 900999);
	print_result(orig, mine);

	/* PRECISION */
	printf(YELLOW"\nInput: [%%.5d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [%.5d]\n", 900999);
	mine = ft_printf("output: [%.5d]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%.10d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [%.10d]\n", 900999);
	mine = ft_printf("output: [%.10d]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%10.5d] number: [%d]\n"UNCOLOR, 900999);
	orig = printf("expect: [%10.5d]\n", 900999);
	mine = ft_printf("output: [%10.5d]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.5d] number: [%d]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.5d]\n", 9009999);
	mine = ft_printf("output: [%-10.5d]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.0d] number: [%d]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.0d]\n", 9009999);
	mine = ft_printf("output: [%-10.0d]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%+-10.15d] number: [%d]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%+-10.15d]\n", 9009999);
	mine = ft_printf("output: [%+-10.15d]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%+-10d] number: [%d]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%+-10d]\n", 9009999);
	mine = ft_printf("output: [%+-10d]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%+-.15d] number: [%d]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%+-.15d]\n", 9009999);
	mine = ft_printf("output: [%+-.15d]\n", 9009999);
	print_result(orig, mine);

	// with flags hh
	signed char	c = '5';
	printf(PURPLE"\nhh TEST\n"UNCOLOR);
	printf("hh modifier: converts signed / unsigned char into int or unsigned int and the hh makes sure it changes back to char\n");
	printf(YELLOW"Input: [5]\n"UNCOLOR);
	orig = printf("expect: [%hhd]\n", c);
	mine = ft_printf("output: [%hhd]\n", c);
	print_result(orig, mine);

	c = 'M';
	compare_results_d_hh(c, 'd');

	c = 'a';
	compare_results_d_hh(c, 'd');

	c = 'z';
	compare_results_d_hh(c, 'd');

	c = ' ';
	compare_results_d_hh(c, 'd');

	// with flags h
	short	shor = 5;
	printf(PURPLE"\nh TEST\n"UNCOLOR);
	printf("h modifier: converts short into int or unsigned int and the h makes sure it changes back to short int or unsigned short int\n");
	compare_results_d_h(shor, 'd');

	shor = -32768;
	compare_results_d_h(shor, 'd');

	shor = 32767;
	compare_results_d_h(shor, 'd');

	shor = 0;
	compare_results_d_h(shor, 'd');

	shor = 1234;
	compare_results_d_h(shor, 'd');

	// with flags l
	long	lon = 5;
	printf(PURPLE"\nl TEST\n"UNCOLOR);
	printf("l modifier: converts long int into int or unsigned int and the l makes sure it changes back to long int or unsigned long int\n");
	compare_results_d_l(lon, 'd');

	lon = -9223372036854775807;
	compare_results_d_l(lon, 'd');

	lon = 9223372036854775807;
	compare_results_d_l(lon, 'd');

	lon = 0;
	compare_results_d_l(lon, 'd');

	lon = 1234;
	compare_results_d_l(lon, 'd');
	//shouldn't work to put in long max value or min value

	// with flags ll
	long long	longlong = 5;
	printf(PURPLE"\nll TEST\n"UNCOLOR);
	printf("ll modifier: converts long long int into int or unsigned int and the ll makes sure it changes back to long int or unsigned long long int\n");
	compare_results_d_ll(longlong, 'd');

	longlong = -9223372036854775807;
	compare_results_d_ll(longlong, 'd');

	longlong = 9223372036854775807;
	compare_results_d_ll(longlong, 'd');

	longlong = 0;
	compare_results_d_ll(longlong, 'd');

	longlong = 1234;
	compare_results_d_ll(longlong, 'd');

	//mine = ft_printf("%d", number);
	//printf("Expected: [%d]	output: [%s]\n", , "5");
	//print_OK(strcmp(printf("%d", number), "5"));
}

static void	i(void)
{
	// DEMICAL INTEGER (DETECTS THE BASE AUTOMATICALLY)
	// defaults to decimal but also reads hexadecimal (if start is 0x) or octal (if start with 0)
	int	number = 5;

	printf(PURPLE"\nDEMICAL INTEGER (DETECTS THE BASE AUTOMATICALLY) TEST\n"UNCOLOR);
	printf(YELLOW"\nInput: [%i]\n"UNCOLOR, number);
	compare_results_d(number, 'i');

	number = 2147483647;
	printf(YELLOW"\nInput: [%i]\n"UNCOLOR, number);
	compare_results_d(number, 'i');

	number = -2147483648;
	printf(YELLOW"\nInput: [%i]\n"UNCOLOR, number);
	compare_results_d(number, 'i');

	number = -1234;
	printf(YELLOW"\nInput: [%i]\n"UNCOLOR, number);
	compare_results_d(number, 'i');

	number = 1234;
	printf(YELLOW"\nInput: [%i]\n"UNCOLOR, number);
	compare_results_d(number, 'i');

	number = -0;
	printf(YELLOW"\nInput: [%i]\n"UNCOLOR, number);
	compare_results_d(number, 'i');

	// difference between %d and %i
	printf(PURPLE"\ndifference between %%d and %%i TEST\n"UNCOLOR);
	number = 012;
	printf(YELLOW"\nInput: [012]\n"UNCOLOR);
	compare_results_d(number, 'i');

	number = 033;
	printf(YELLOW"\nInput: [033]\n"UNCOLOR);
	compare_results_d(number, 'i');

	number = 0x12;
	printf(YELLOW"\nInput: [0x12]\n"UNCOLOR);
	compare_results_d(number, 'i');

	number = 2550;
	printf(YELLOW"\nInput: 2550 with [%%d]\n"UNCOLOR);
	printf("expect: [%d]\n", number);
	ft_printf("output: [%d]\n", number);

	number = 0x2550;
	printf(YELLOW"\nInput: 0x2550 with [%%i]\n"UNCOLOR);
	printf("expect: [%i]\n", number);
	ft_printf("output: [%i]\n", number);

	number = 021;
	printf(YELLOW"\nInput: 021 with [%%d]\n"UNCOLOR);
	printf("%%d expect: [%d]\n", number);
	ft_printf("%%d output: [%d]\n", number);

	number = 021;
	printf(YELLOW"\nInput: 021 with [%%i]\n"UNCOLOR);
	printf("%%i expect: [%i]\n", number);
	ft_printf("%%i output: [%i]\n", number);

	// with flags hh
	signed char	c = '5';
	printf(PURPLE"\nhh TEST\n"UNCOLOR);
	printf("hh modifier: converts signed / usigned char into int or unsigned int and the hh makes sure it changes back to char\n");
	printf("\nInput: [%c]\n", c);
	compare_results_d_hh(c, 'i');

	c = 'M';
	printf("\nInput: [%c]\n", c);
	compare_results_d_hh(c, 'i');

	c = 'a';
	printf("\nInput: [%c]\n", c);
	compare_results_d_hh(c, 'i');

	c = 'z';
	printf("\nInput: [%c]\n", c);
	compare_results_d_hh(c, 'i');

	c = ' ';
	printf("\nInput: [%c]\n", c);
	compare_results_d_hh(c, 'i');

	// with flags h
	short int	shor = 5;
	printf(PURPLE"\nh TEST\n"UNCOLOR);
	printf("h modifier: converts short into int or unsigned int and the h makes sure it changes back to short int or unsigned short int\n");
	printf("\nInput: [%d]\n", shor);
	compare_results_d_h(shor, 'i');

	shor = -32768;
	printf("\nInput: [%d]\n", shor);
	compare_results_d_h(shor, 'i');

	shor = 32767;
	printf("\nInput: [%d]\n", shor);
	compare_results_d_h(shor, 'i');

	shor = 0;
	printf("\nInput: [%d]\n", shor);
	compare_results_d_h(shor, 'i');

	shor = 1234;
	printf("\nInput: [%d]\n", shor);
	compare_results_d_h(shor, 'i');

	// with flags l
	long int	lon = 5;
	printf(PURPLE"\nl TEST\n"UNCOLOR);
	printf("l modifier: converts long int into int or unsigned int and the l makes sure it changes back to long int or unsigned long int\n");
	printf("\nInput: [%lu]\n", lon);
	compare_results_d_l(lon, 'i');

	lon = -2147483648;
	printf("\nInput: [%lu]\n", lon);
	compare_results_d_l(lon, 'i');

	lon = 2147483647;
	printf("\nInput: [%lu]\n", lon);
	compare_results_d_l(lon, 'i');

	lon = 0;
	printf("\nInput: [%lu]\n", lon);
	compare_results_d_l(lon, 'i');

	lon = 1234;
	printf("\nInput: [%lu]\n", lon);
	compare_results_d_l(lon, 'i');
	//shouldn't work to put in long max value or min value

	// with flags ll
	long long int	longlong = 5;
	printf(PURPLE"\nll TEST\n"UNCOLOR);
	printf("ll modifier: converts long long int into int or unsigned int and the ll makes sure it changes back to long int or unsigned long long int\n");
	printf("\nInput: [%llu]\n", longlong);
	compare_results_d_ll(longlong, 'i');

	longlong = -2147483648;
	printf("\nInput: [%llu]\n", longlong);
	compare_results_d_ll(longlong, 'i');

	longlong = 2147483647;
	printf("\nInput: [%llu]\n", longlong);
	compare_results_d_ll(longlong, 'i');

	longlong = 0;
	printf("\nInput: [%llu]\n", longlong);
	compare_results_d_ll(longlong, 'i');

	longlong = 1234;
	printf("\nInput: [%llu]\n", longlong);
	compare_results_d_ll(longlong, 'i');
}

static void	u(void)
{
	int orig;
	int mine;
	// INT UNSIGNED DECIMAL (non negative numbers)
	unsigned int	number = 5;

	printf("\nInput: [%u]\n", number);
	compare_results_d(number, 'u');

	number = 4294967295;
	printf("\nInput: [%u]\n", number);
	compare_results_d(number, 'u');

	number = -2147483648;
	printf("\nInput: [%i]\n", number);
	compare_results_d(number, 'u');

	number = -1234;
	printf("\nInput: [%i]\n", number);
	compare_results_d(number, 'u');

	number = 1234;
	printf("\nInput: [%u]\n", number);
	compare_results_d(number, 'u');

	number = -0;
	printf("\nInput: [%i]\n", number);
	compare_results_d(number, 'u');

	/* 0 && WIDTH*/
	printf(YELLOW"\nInput: [%%05u] number: [%u]\n"UNCOLOR, 5);
	orig = printf("expect: [%05u]\n", 5);
	mine = ft_printf("output: [%05u]\n", 5);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%010u] number: [%u]\n"UNCOLOR, 20005);
	orig = printf("expect: [%010u]\n", 20005);
	mine = ft_printf("output: [%010u]\n", 20005);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%010u] number: [%u]\n"UNCOLOR, 900999);
	orig = printf("expect: [%010u]\n", 900999);
	mine = ft_printf("output: [%010u]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%05.u] number: [%u]\n"UNCOLOR, 900999);
	orig = printf("expect: [%05.u]\n", 900999);
	mine = ft_printf("output: [%05.u]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%05.u] number: [%u]\n"UNCOLOR, 0);
	orig = printf("expect: [%05.u]\n", 0);
	mine = ft_printf("output: [%05.u]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%05.u] number: [%u]\n"UNCOLOR, 1);
	orig = printf("expect: [%05.u]\n", 1);
	mine = ft_printf("output: [%05.u]\n", 1);
	print_result(orig, mine);

	/* space */
	printf(YELLOW"\nInput: [%% u] number: [%u] UNDEFINED BEHAVIOUR\n"UNCOLOR, 900999);
	orig = printf("expect: [%u]\n", 900999);
	mine = ft_printf("output: [% u]\n", 900999);
	print_result(orig, mine);

	/* - */
	printf(YELLOW"\nInput: [%%-010u] number: [%u]\n"UNCOLOR, 900999);
	orig = printf("expect: [%-10u]\n", 900999);
	mine = ft_printf("output: [%-010u]\n", 900999);
	print_result(orig, mine);

	/* + */
	printf(YELLOW"\nInput: [%%+u] number: [%u] UNDEFINED BEHAVIOUR\n"UNCOLOR, 900999);
	orig = printf("expect: [%u]\n", 900999);
	mine = ft_printf("output: [%+u]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%+-010u] number: [%u] UNDEFINED BEHAVIOUR\n"UNCOLOR, 900999);
	orig = printf("expect: [%-10u]\n", 900999);
	mine = ft_printf("output: [%+-010u]\n", 900999);
	print_result(orig, mine);

	/* PRECISION */
	printf(YELLOW"\nInput: [%%.5u] number: [%u]\n"UNCOLOR, 900999);
	orig = printf("expect: [%.5u]\n", 900999);
	mine = ft_printf("output: [%.5u]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%.10u] number: [%u]\n"UNCOLOR, 900999);
	orig = printf("expect: [%.10u]\n", 900999);
	mine = ft_printf("output: [%.10u]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%10.5u] number: [%u]\n"UNCOLOR, 900999);
	orig = printf("expect: [%10.5u]\n", 900999);
	mine = ft_printf("output: [%10.5u]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.5u] number: [%u]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.5u]\n", 9009999);
	mine = ft_printf("output: [%-10.5u]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.0u] number: [%u]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.0u]\n", 9009999);
	mine = ft_printf("output: [%-10.0u]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-1.10u] number: [%u]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-1.10u]\n", 9009999);
	mine = ft_printf("output: [%-1.10u]\n", 9009999);
	print_result(orig, mine);

	// with flags hh
	unsigned char	c = '5';
	printf(PURPLE"\nhh TEST\n"UNCOLOR);
	printf("hh modifier: converts signed / usigned char into int or unsigned int and the hh makes sure it changes back to char\n");
	compare_results_hhu(c);

	c = 'M';
	compare_results_hhu(c);

	c = 'a';
	compare_results_hhu(c);

	c = 'z';
	compare_results_hhu(c);

	c = ' ';
	compare_results_hhu(c);

	// with flags h
	unsigned short	shor = 5;
	printf(PURPLE"\nh TEST\n"UNCOLOR);
	printf("h modifier: converts short into int or unsigned int and the h makes sure it changes back to short int or unsigned short int\n");
	compare_results_hu(shor);

	shor = 32768;
	compare_results_hu(shor);

	shor = 65535;
	compare_results_hu(shor);

	shor = 0;
	compare_results_hu(shor);

	shor = 1234;
	compare_results_hu(shor);

	// with flags l
	unsigned long	lon = 5;
	printf(PURPLE"\nl TEST\n"UNCOLOR);
	printf("l modifier: converts long int into int or unsigned int and the l makes sure it changes back to long int or unsigned long int\n");
	compare_results_lu(lon);

	lon = 18446744073709551615U;
	compare_results_lu(lon);

	lon = 9223372036854775807;
	compare_results_lu(lon);

	lon = 0;
	compare_results_lu(lon);

	lon = 1234;
	compare_results_lu(lon);
	//shouldn't work to put in long max value or min value

	// with flags ll
	unsigned long long	longlong = 5;
	printf(PURPLE"\nll TEST\n"UNCOLOR);
	printf("ll modifier: converts long long int into int or unsigned int and the ll makes sure it changes back to long int or unsigned long long int\n");
	compare_results_llu(longlong);

	longlong = 18446744073709551615U;
	compare_results_llu(longlong);

	longlong = 9223372036854775807;
	compare_results_llu(longlong);

	longlong = 0xffffffffffffffff;
	compare_results_llu(longlong);

	longlong = 1234;
	compare_results_llu(longlong);
}

int main(void)
{
	printf(PURPLE"decimal integer (assume base 10) test\n"UNCOLOR);
	d();

	printf(PURPLE"\n-------\n\n"UNCOLOR);
	printf(PURPLE"decimal integer (detects base automatically) test\n"UNCOLOR);
	i();

	printf(PURPLE"\n-------\n\n"UNCOLOR);
	printf(PURPLE"int unsigned decimal test\n"UNCOLOR);
	u();
}
