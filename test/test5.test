# include "../ft_printf.h"
# include <stdio.h>
# include <unistd.h>
# include <string.h>
# include <assert.h>
# include <limits.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

# define RESET	"\033[0m"
# define BOLD	"\033[1m"
# define RED		"\033[31m"
# define GREEN	"\033[32m"
# define YELLOW		"\033[33m"
# define BLUE	"\033[34m"
# define PURPLE		"\033[35m"
# define CYAN	"\033[36m"
# define WHITE	"\033[37m"
# define UNCOLOR	"\033[39m"

void	print_OK(int result)
{
	if (result != 0)
		printf(RED"KO!\n"UNCOLOR);
	else
		printf(GREEN"OK!\n"UNCOLOR);
}

void	print_result(int result, int mine)
{
	printf(CYAN"return expected [%d] : [%d]	"UNCOLOR, result, mine);
	print_OK(result - mine);
}

static void	compare_results(int number, int number2, char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		printf(YELLOW"\nInput: [%d][%d]\n"UNCOLOR, number, number2);
		orig = printf("expect: [%*d]\n", number, number2);
		mine = ft_printf("output: [%*d]\n", number, number2);
		print_result(orig, mine);
	}
	else if (c == 'c')
	{
		printf(YELLOW"\nInput: [%d][%d]\n"UNCOLOR, number, number2);
		orig = printf("expect: [%*c]\n", number, number2);
		mine = ft_printf("output: [%*c]\n", number, number2);
		print_result(orig, mine);
	}/*
	else if (c == 's')
	{
		printf(YELLOW"\nInput: [%d][%d]\n"UNCOLOR, number, number2);
		orig = printf("expect: [%*s]\n", number, number2);
		mine = ft_printf("output: [%*s]\n", number, number2);
		print_result(orig, mine);
	}
	else if (c == 'p')
	{
		printf(YELLOW"\nInput: [%d][%d]\n"UNCOLOR, number, number2);
		orig = printf("expect: [%*p]\n", number, number2);
		mine = ft_printf("output: [%*p]\n", number, number2);
		print_result(orig, mine);
	}*/
}

static void	compare_results_width_prec(int number, int number2, int number3)
{
	int orig;
	int mine;

	printf(YELLOW"\nInput: [%d][%d][%d]\n"UNCOLOR, number, number2, number3);
	orig = printf("expect: [%*.*d]\n", number, number2, number3);
	mine = ft_printf("output: [%*.*d]\n", number, number2, number3);
	print_result(orig, mine);
}

static void	compare_results_prec(int number, int number2)
{
	int orig;
	int mine;

	printf(YELLOW"\nInput: [%d][%d]\n"UNCOLOR, number, number2);
	orig = printf("expect: [%.*d]\n", number, number2);
	mine = ft_printf("output: [%.*d]\n", number, number2);
	print_result(orig, mine);
}

static void	compare_results_prec_str(int number, char *str)
{
	int orig;
	int mine;

	printf(YELLOW"\nInput: [%d][%s]\n"UNCOLOR, number, str);
	orig = printf("expect: [%.*s]\n", number, str);
	mine = ft_printf("output: [%.*s]\n", number, str);
	print_result(orig, mine);
}

static void	color(void)
{
	printf("hello {red}%%s{yellow} my name is {bold}%%s{reset} \n");
	ft_printf("hello {red}%s{yellow} my name is {bold}%s{reset} \n\n", "my", "james");

	char *str = "hello";
	printf("input: {cyan}[%.5s]{uncolor}\n", str);
	ft_printf("color: {cyan}[%.5s]{uncolor}\n\n", str);

	printf("input: {red}[%.5s]\n", str);
	ft_printf("color: {red}[%.5s]\n\n", str);

	printf("input: {bold}[% 16f]{reset}\n", 900999.10256);
	ft_printf("output: {bold}[% 16f]{reset}\n\n", 900999.10256);

	printf("input: {blue}[% 016f]{uncolor}\n", 900999.10256);
	ft_printf("output: {blue}[% 016f]{uncolor}\n\n", 900999.10256);

	printf("input: {yellow}[%+16f]{uncolor}\n", 900999.10256);
	ft_printf("output: {yellow}[%+16f]{uncolor}\n\n", 900999.10256);

	printf("input: {green}[%-10.0d]{uncolor}\n", 9009999);
	ft_printf("output: {green}[%-10.0d]{uncolor}\n\n", 9009999);

	printf("{{red}input: {purple}{bold}[%+-10.15d]{reset}\n", 9009999);
	ft_printf("{{red}output: {purple}{bold}[%+-10.15d]{reset}\n\n", 9009999);
}

static void	bonus(void)
{
	int	orig;
	int	mine;

	int	number = 5;
	int number2 = 1;

	compare_results(number, number2, 'd');

	number = 214;
	number2 = 5;
	compare_results(number, number2, 'd');

	number = -214;
	compare_results(number, number2, 'd');

	number = -1234;
	compare_results(number, number2, 'd');

	number = 1234;
	number2 = 10;
	compare_results(number, number2, 'd');

	number = -0;
	compare_results(number, number2, 'd');

	number = 5;
	number2 = 10;
	compare_results(number, number2, 'd');

	// difference between %d and %i
	printf(PURPLE"\ndifference between %%d and %%i TEST\n"UNCOLOR);
	number = 012;
	compare_results(number, number2, 'd');

	number = 033;
	compare_results(number, number2, 'd');

	number = 5;
	number2 = 42;
	compare_results(number, number2, 'd');

	number = 5;
	number2 = 10;
	int number3 = 15;
	compare_results_width_prec(number, number2, number3);

	number = 10;
	number2 = 5;
	number3 = 15;
	compare_results_width_prec(number, number2, number3);

	number = -10;
	number2 = 5;
	number3 = 15;
	compare_results_width_prec(number, number2, number3);

	compare_results(5, 42, 'd');

	compare_results(-5, 42, 'd');

	compare_results(0, 42, 'd');

	compare_results(0, 0, 'c');

	compare_results(-15, 0, 'c');

	compare_results_prec(5, 42);

	compare_results_prec(-5, 42);

	compare_results_prec(0, 42);

	compare_results_prec_str(5, "42");

	compare_results_prec_str(-5, "42");

	compare_results_prec_str(0, "42");

	/*compare_results(5, 0, 's');

	compare_results(10, 0, 'p');*/

	printf(YELLOW"\nInput: [%d][%d]\n"UNCOLOR, -15, 42);
	orig = printf("expect: [%05.*d]\n", -15, 42);
	mine = ft_printf("output: [%05.*d]\n", -15, 42);
	print_result(orig, mine);
}

static void	error(void)
{
	int	ret;

	printf("%% qi\n");
	ret = ft_printf(UNCOLOR"% qi\n");
	ft_putnbr(ret);
	ft_putchar('\n');
	
	printf("%%.0-d hi\n");
	ret = ft_printf("%.0-d hi\n", 5);
	ft_putnbr(ret);
	ft_putchar('\n');
}

int main(void)
{
	printf(PURPLE"color test\n"UNCOLOR);
	color();

	printf(PURPLE"bonus test\n"UNCOLOR);
	bonus();

	printf(PURPLE"error test\n"UNCOLOR);
	error();
}
