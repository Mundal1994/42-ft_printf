# include "../ft_printf.h"
# include <stdio.h>
# include <unistd.h>
# include <string.h>
# include <assert.h>
# include <limits.h>

# define RESET	"\033[0m"
# define BOLD	"\033[1m"
# define RED		"\033[31m"
# define GREEN	"\033[32m"
# define YELLOW		"\033[33m"
# define BLUE	"\033[34m"
# define PURPLE		"\033[35m"
# define CYAN	"\033[36m"
# define WHITE	"\033[37m"
# define UNCOLOR	"\033[39m"

void	print_OK(int result)
{
	if (result != 0)
		printf(RED"KO!\n"UNCOLOR);
	else
		printf(GREEN"OK!\n"UNCOLOR);
}

void	print_result(int result, int mine)
{
	printf(CYAN"return expected [%d] : [%d]	"UNCOLOR, result, mine);
	print_OK(result - mine);
}

static void	compare_char(char c)
{
	int orig;
	int mine;

	printf(YELLOW"\n[%c]\n"UNCOLOR, c);
	orig = printf("expect: [%c]\n", c);
	mine = ft_printf("output: [%c]\n", c);
	print_result(orig, mine);
}

static void	compare_char_flag(char c, char flag)
{
	int orig;
	int mine;

	if (flag == '-')
	{
		printf(YELLOW"\n[%%-c]\n"UNCOLOR);
		orig = printf("expect: [%-c]\n", c);
		mine = ft_printf("output: [%-c]\n", c);
		print_result(orig, mine);
	}
	else
	{
		printf(YELLOW"\nwith flags [+0 #][%c]\n"UNCOLOR, c);
		orig = printf("expect : [undefined behaviour]\n");
		mine = ft_printf("output: [%+c]\n", c);
		print_result(orig, mine);
	}
}

static void	compare_str_flag(char *s, char flag)
{
	int orig;
	int mine;

	if (flag == '-')
	{
		printf(YELLOW"\n[%%-s]\n"UNCOLOR);
		orig = printf("expect: [%-s]\n", s);
		mine = ft_printf("output: [%-s]\n", s);
		print_result(orig, mine);
	}
	else
	{
		printf(YELLOW"\nwith flags [+0 #][%s]\n"UNCOLOR, s);
		orig = printf("expect : [undefined behaviour]\n");
		mine = ft_printf("output: [%+s]\n", s);
		print_result(orig, mine);
	}
}

static void	compare_string(char *str)
{
	int orig;
	int mine;

	printf(YELLOW"\n[%s]\n"UNCOLOR, str);
	orig = printf("expect: [%s]\n", str);
	mine = ft_printf("output: [%s]\n", str);
	print_result(orig, mine);
}

static void	basic(void)
{
	char hi = 'W';
	char ho = 'O';
	char *str = "new";
	char *pnt = str;
	short nbr = 24;
	//int	*ptr = &nbr;
	printf(UNCOLOR"expect: hello[%+hd]\n", nbr);
	printf(UNCOLOR"expect: hello[%c][%c][%s][%p]\n", hi, ho, str, pnt);
	ft_printf("output: hello[%c][%c][%s][%p]\n", hi, ho, str, pnt);
	ft_printf("hello my name is james\n");
	ft_printf("hi");
	ft_printf("\n");
	ft_printf("");
	ft_printf("%");
	ft_printf("");
	ft_printf("h\n");
}

static void	percentage_print(void)
{
	int orig;
	int mine;

	orig = printf("expect: [%%]\n");
	mine = ft_printf("output: [%%]\n");
	print_result(orig, mine);

	printf("\n");
	orig = printf("expect: [%%] [%%] [%%]\n");
	mine = ft_printf("output: [%%] [%%] [%%]\n");
	print_result(orig, mine);

	printf("\n");
	orig = printf("expect: [%%] [%%] [%%]\n");
	mine = ft_printf("output: [%%] [%%] [%%]\n");
	print_result(orig, mine);

	printf("\n");
	orig = printf("expect: [%5%]\n");
	mine = ft_printf("output: [%5%]\n");
	print_result(orig, mine);

	printf("\n");
	orig = printf("expect: [% 50%]\n");
	mine = ft_printf("output: [% 50%]\n");
	print_result(orig, mine);

	printf("\n");
	orig = printf("expect: [%+10%]\n");
	mine = ft_printf("output: [%+10%]\n");
	print_result(orig, mine);

	printf("\n");
	orig = printf("expect: [%-10%]\n");
	mine = ft_printf("output: [%-10%]\n");
	print_result(orig, mine);

	printf("\n");
	orig = printf("expect: [%- 10%]\n");
	mine = ft_printf("output: [%- 10%]\n");
	print_result(orig, mine);

	printf("\n");
	orig = printf("expect: [%010%]\n");
	mine = ft_printf("output: [%010%]\n");
	print_result(orig, mine);
}

static void	c(void)
{
	int	orig;
	int	mine;

	char c = 'H';
	compare_char(c);

	c = ' ';
	compare_char(c);

	c = '_';
	compare_char(c);

	c = '8';
	compare_char(c);

	c = 'm';
	compare_char(c);
/*
	compare_char_flag(c, '#');

	compare_char_flag(c, '+');

	compare_char_flag(c, '0');

	compare_char_flag(c, ' ');
*/
	compare_char_flag(c, '-');

	c = 'n';
	compare_char_flag(c, '-');

	c = ' ';
	compare_char_flag(c, '-');

	c = 'L';
	compare_char_flag(c, '-');

	c = '9';
	compare_char_flag(c, '-');

	printf(YELLOW"\n[%%-4c]\n"UNCOLOR);
	orig = printf("expect: [%-4c]\n", c);
	mine = ft_printf("output: [%-4c]\n", c);
	print_result(orig, mine);

	printf(YELLOW"\n[%%4c]\n"UNCOLOR);
	orig = printf("expect: [%4c]\n", c);
	mine = ft_printf("output: [%4c]\n", c);
	print_result(orig, mine);

	printf(YELLOW"\n[%%300c]\n"UNCOLOR);
	orig = printf("expect: [%300c]\n", c);
	mine = ft_printf("output: [%300c]\n", c);
	print_result(orig, mine);

	printf(YELLOW"\n[%%-1000c]\n"UNCOLOR);
	orig = printf("expect: [%-1000c]\n", c);
	mine = ft_printf("output: [%-1000c]\n", c);
	print_result(orig, mine);

	/*
	printf(YELLOW"\n[%%-4.3c]\n"UNCOLOR);
	orig = printf("expect: [%-4.3c]\n", c);
	mine = ft_printf("output: [%-4.3c]\n", c);
	print_result(orig, mine);
	*/
}

static void	s(void)
{
	int	orig;
	int	mine;

	char *str = "hello";
	compare_string(str);

	str = "hi my name is james";
	compare_string(str);

	str = "this is a very very very very very long string -!";
	compare_string(str);

	str = " ";
	compare_string(str);

	str = "123456789";
	compare_string(str);

	compare_str_flag(str, '-');

	compare_str_flag("hello", '-');

	compare_str_flag("hi my name is james", '-');

	compare_str_flag("this is a very very very very very long string -!", '-');

	compare_str_flag(" ", '-');

	/* WIDTH TEST */
	str = "hi my name is james";
	printf(YELLOW"\n[%%-35s]\n"UNCOLOR);
	orig = printf("expect: [%-35s]\n", str);
	mine = ft_printf("output: [%-35s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%35s]\n"UNCOLOR);
	orig = printf("expect: [%35s]\n", str);
	mine = ft_printf("output: [%35s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%3s]\n"UNCOLOR);
	orig = printf("expect: [%3s]\n", str);
	mine = ft_printf("output: [%3s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%300s]\n"UNCOLOR);
	orig = printf("expect: [%300s]\n", str);
	mine = ft_printf("output: [%300s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%1000s]\n"UNCOLOR);
	orig = printf("expect: [%1000s]\n", str);
	mine = ft_printf("output: [%1000s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%09s] & [%%9s] in orig because this is undefined behaviour\n"UNCOLOR);
	orig = printf("expect: [%9s]\n", str);
	mine = ft_printf("output: [%09s]\n", str);
	print_result(orig, mine);

	/* PRECISION TEST */

	printf(YELLOW"\n[%%.5s]\n"UNCOLOR);
	orig = printf("expect: [%.5s]\n", str);
	mine = ft_printf("output: [%.5s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%10.5s]\n"UNCOLOR);
	orig = printf("expect: [%10.5s]\n", str);
	mine = ft_printf("output: [%10.5s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%-10.5s]\n"UNCOLOR);
	orig = printf("expect: [%-10.5s]\n", str);
	mine = ft_printf("output: [%-10.5s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%10.1s]\n"UNCOLOR);
	orig = printf("expect: [%10.1s]\n", str);
	mine = ft_printf("output: [%10.1s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%-10.1s]\n"UNCOLOR);
	orig = printf("expect: [%-10.1s]\n", str);
	mine = ft_printf("output: [%-10.1s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%10.0s]\n"UNCOLOR);
	orig = printf("expect: [%10.0s]\n", str);
	mine = ft_printf("output: [%10.0s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%10.12s]\n"UNCOLOR);
	orig = printf("expect: [%10.12s]\n", str);
	mine = ft_printf("output: [%10.12s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%10.10s]\n"UNCOLOR);
	orig = printf("expect: [%10.10s]\n", str);
	mine = ft_printf("output: [%10.10s]\n", str);
	print_result(orig, mine);

	str = "hello";
	printf(YELLOW"\n[%%10.10s]\n"UNCOLOR);
	orig = printf("expect: [%10.10s]\n", str);
	mine = ft_printf("output: [%10.10s]\n", str);
	print_result(orig, mine);

	printf(YELLOW"\n[%%10.10s]\n"UNCOLOR);
	orig = printf("expect: [%10.10s]\n", NULL);
	mine = ft_printf("output: [%10.10s]\n", NULL);
	print_result(orig, mine);

	printf(YELLOW"\n[%%4.4s]\n"UNCOLOR);
	orig = printf("expect: [%4.4s]\n", NULL);
	mine = ft_printf("output: [%4.4s]\n", NULL);
	print_result(orig, mine);

	printf(YELLOW"\n[%%5.5s]\n"UNCOLOR);
	orig = printf("expect: [%5.5s]\n", NULL);
	mine = ft_printf("output: [%5.5s]\n", NULL);
	print_result(orig, mine);

	printf(YELLOW"\n[%%10.5s]\n"UNCOLOR);
	orig = printf("expect: [%10.5s]\n", NULL);
	mine = ft_printf("output: [%10.5s]\n", NULL);
	print_result(orig, mine);

	printf(YELLOW"\n[%%10.2s]\n"UNCOLOR);
	orig = printf("expect: [%10.2s]\n", NULL);
	mine = ft_printf("output: [%10.2s]\n", NULL);
	print_result(orig, mine);

/*
	int orig;
	int mine;

	str = "hello";
	printf(YELLOW"\n[%s]\n"UNCOLOR, str);
	orig = printf("expect: [%#s]\n", str);
	mine = ft_printf("output: [%#s]\n", str);
	print_result(orig, mine);*/
}

static void	p(void)
{
	int orig;
	int mine;
	// POINTER
	int intnbr = 25;
	int *pnt;
	unsigned long uint = ULONG_MAX;
	unsigned long *pnt2 = &uint;

	pnt = &intnbr;
	orig = printf("expect: [%p]\n", pnt);
	mine = ft_printf("output: [%p]\n", pnt);
	print_result(orig, mine);

	/* WIDTH TEST */

	printf(YELLOW"\n[%%-50p]\n"UNCOLOR);
	orig = printf("expect: [%-1p]\n", pnt);
	mine = ft_printf("output: [%-1p]\n", pnt);
	print_result(orig, mine);

	printf(YELLOW"\n[%lu]\n"UNCOLOR,  ULONG_MAX);
	orig = printf("expect: [%p]\n", pnt2);
	mine = ft_printf("output: [%p]\n", pnt2);
	print_result(orig, mine);

	uint = -1;
	printf(YELLOW"\n[%%-1]\n"UNCOLOR);
	orig = printf("expect: [%-500p]\n", pnt2);
	mine = ft_printf("output: [%-500p]\n", pnt2);
	print_result(orig, mine);

	uint = 0;
	printf(YELLOW"\n[%%0]\n"UNCOLOR);
	orig = printf("expect: [%5p]\n", pnt2);
	mine = ft_printf("output: [%5p]\n", pnt2);
	print_result(orig, mine);

	uint = 17;
	printf(YELLOW"\n[%%17]\n"UNCOLOR);
	orig = printf("expect: [%20p]\n", pnt2);
	mine = ft_printf("output: [%20p]\n", pnt2);
	print_result(orig, mine);

	pnt = NULL;
	printf(YELLOW"\n[%%0x0]\n"UNCOLOR);
	orig = printf("expect: [%p]\n", pnt);
	mine = ft_printf("output: [%p]\n", pnt);
	print_result(orig, mine);

	printf(YELLOW"\n[%%.p  0x0]\n"UNCOLOR);
	orig = printf("expect: [%.p]\n", pnt);
	mine = ft_printf("output: [%.p]\n", pnt);
	print_result(orig, mine);
}

int main(void)
{
	printf(PURPLE"BASIC STRING TEST\n"UNCOLOR);
	basic();

	printf(PURPLE"\n-------\n\n"UNCOLOR);

	printf(PURPLE"PERCENTAGE PRINT TEST\n"UNCOLOR);
	percentage_print();

	printf(PURPLE"\n-------\n\n"UNCOLOR);

	printf(PURPLE"\nCHAR TEST\n"UNCOLOR);
	c();

	printf(PURPLE"\n-------\n\n"UNCOLOR);
	printf(PURPLE"STRING TEST\n"UNCOLOR);
	s();

	printf(PURPLE"\n-------\n\n"UNCOLOR);
	printf(PURPLE"POINTER TEST\n"UNCOLOR);
	p();
int orig;
int mine;
	printf(YELLOW"\n[%%c]\n"UNCOLOR);
	orig = printf("expect: [%c]\n", 0);
	mine = ft_printf("output: [%c]\n", 0);
	print_result(orig, mine);

	return (0);
}
