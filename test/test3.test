# include "../ft_printf.h"
# include <stdio.h>
# include <unistd.h>
# include <string.h>
# include <assert.h>
# include <limits.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

# define RESET	"\033[0m"
# define BOLD	"\033[1m"
# define RED		"\033[31m"
# define GREEN	"\033[32m"
# define YELLOW		"\033[33m"
# define BLUE	"\033[34m"
# define PURPLE		"\033[35m"
# define CYAN	"\033[36m"
# define WHITE	"\033[37m"
# define UNCOLOR	"\033[39m"

void	print_OK(int result)
{
	if (result != 0)
		printf(RED"KO!\n"UNCOLOR);
	else
		printf(GREEN"OK!\n"UNCOLOR);
}

void	print_result(int result, int mine)
{
	printf(CYAN"return expected [%d] : [%d]	"UNCOLOR, result, mine);
	print_OK(result - mine);
}

static void	compare_results_d(int number, char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		orig = printf("expect: [%d]\n", number);
		mine = ft_printf("output: [%d]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'o')
	{
		orig = printf("expect: [%o]\n", number);
		mine = ft_printf("output: [%o]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'x')
	{
		orig = printf("expect: [%x]\n", number);
		mine = ft_printf("output: [%x]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'X')
	{
		orig = printf("expect: [%X]\n", number);
		mine = ft_printf("output: [%X]\n", number);
		print_result(orig, mine);
	}
}

static void	compare_results_d_hh(signed char number, char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		printf(YELLOW"\nInput: [%hhd]\n"UNCOLOR, number);
		orig = printf("expect: [%hhd]\n", number);
		mine = ft_printf("output: [%hhd]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'o')
	{
		printf(YELLOW"\nInput: [%hho]\n"UNCOLOR, number);
		orig = printf("expect: [%hho]\n", number);
		mine = ft_printf("output: [%hho]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'x')
	{
		printf(YELLOW"\nInput: [%hhx]\n"UNCOLOR, number);
		orig = printf("expect: [%hhx]\n", number);
		mine = ft_printf("output: [%hhx]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'X')
	{
		printf(YELLOW"\nInput: [%hhX]\n"UNCOLOR, number);
		orig = printf("expect: [%hhX]\n", number);
		mine = ft_printf("output: [%hhX]\n", number);
		print_result(orig, mine);
	}
}

static void	compare_results_d_h(short number, char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		printf(YELLOW"\nInput: [%hd]\n"UNCOLOR, number);
		orig = printf("expect: [%hd]\n", number);
		mine = ft_printf("output: [%hd]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'o')
	{
		printf(YELLOW"\nInput: [%ho]\n"UNCOLOR, number);
		orig = printf("expect: [%ho]\n", number);
		mine = ft_printf("output: [%ho]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'x')
	{
		printf(YELLOW"\nInput: [%hx]\n"UNCOLOR, number);
		orig = printf("expect: [%hx]\n", number);
		mine = ft_printf("output: [%hx]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'X')
	{
		printf(YELLOW"\nInput: [%hX]\n"UNCOLOR, number);
		orig = printf("expect: [%hX]\n", number);
		mine = ft_printf("output: [%hX]\n", number);
		print_result(orig, mine);
	}
}

static void	compare_results_d_l(long number, char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		printf(YELLOW"\nInput: [%lo]\n"UNCOLOR, number);
		orig = printf("expect: [%lo]\n", number);
		mine = ft_printf("output: [%lo]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'o')
	{
		printf(YELLOW"\nInput: [%lo]\n"UNCOLOR, number);
		orig = printf("expect: [%lo]\n", number);
		mine = ft_printf("output: [%lo]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'x')
	{
		printf(YELLOW"\nInput: [%lx]\n"UNCOLOR, number);
		orig = printf("expect: [%lx]\n", number);
		mine = ft_printf("output: [%lx]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'X')
	{
		printf(YELLOW"\nInput: [%lX]\n"UNCOLOR, number);
		orig = printf("expect: [%lX]\n", number);
		mine = ft_printf("output: [%lX]\n", number);
		print_result(orig, mine);
	}
}

static void	compare_results_d_ll(long long number, char c)
{
	int orig;
	int mine;

	if (c == 'd')
	{
		printf(YELLOW"\nInput: [%lld]\n"UNCOLOR, number);
		orig = printf("expect: [%lld]\n", number);
		mine = ft_printf("output: [%lld]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'o')
	{
		printf(YELLOW"\nInput: [%llo]\n"UNCOLOR, number);
		orig = printf("expect: [%llo]\n", number);
		mine = ft_printf("output: [%llo]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'x')
	{
		printf(YELLOW"\nInput: [%llx]\n"UNCOLOR, number);
		orig = printf("expect: [%llx]\n", number);
		mine = ft_printf("output: [%llx]\n", number);
		print_result(orig, mine);
	}
	else if (c == 'X')
	{
		printf(YELLOW"\nInput: [%llX]\n"UNCOLOR, number);
		orig = printf("expect: [%llX]\n", number);
		mine = ft_printf("output: [%llX]\n", number);
		print_result(orig, mine);
	}
}

static void	o(void)
{
	int orig;
	int mine;

	// OCTAL (base 8) integer

	int	number = 150;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'o');

	number = 31;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'o');

	number = 0;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'o');

	number = -1234;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'o');

	number = 1234;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'o');

	number = 15;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'o');

	number = -10;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'o');

	number = 10;
	printf(YELLOW"\nInput: [%d]\n"UNCOLOR, number);
	compare_results_d(number, 'o');

	/* space */
	printf(YELLOW"\nInput: [%% o] number: [%o] UNDEFINED BEHAVIOUR\n"UNCOLOR, 900999);
	orig = printf("expect: [%o]\n", 900999);
	mine = ft_printf("output: [% o]\n", 900999);
	print_result(orig, mine);

	/* - */
	printf(YELLOW"\nInput: [%%-010o] number: [%o]\n"UNCOLOR, 900999);
	orig = printf("expect: [%-10o]\n", 900999);
	mine = ft_printf("output: [%-010o]\n", 900999);
	print_result(orig, mine);

	/* + */
	printf(YELLOW"\nInput: [%%+o] number: [%o] UNDEFINED BEHAVIOUR\n"UNCOLOR, 900999);
	orig = printf("expect: [%o]\n", 900999);
	mine = ft_printf("output: [%+o]\n", 900999);
	print_result(orig, mine);

	/* WIDTH */
	printf(YELLOW"\nInput: [%%100o] number: [%o]\n"UNCOLOR, 900999);
	orig = printf("expect: [%100o]\n", 900999);
	mine = ft_printf("output: [%100o]\n", 900999);
	print_result(orig, mine);

	/* PRECISION */
	printf(YELLOW"\nInput: [%%.5o] number: [%o]\n"UNCOLOR, 900999);
	orig = printf("expect: [%.5o]\n", 900999);
	mine = ft_printf("output: [%.5o]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%.10o] number: [%o]\n"UNCOLOR, 900999);
	orig = printf("expect: [%.10o]\n", 900999);
	mine = ft_printf("output: [%.10o]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%10.5o] number: [%o]\n"UNCOLOR, 900999);
	orig = printf("expect: [%10.5o]\n", 900999);
	mine = ft_printf("output: [%10.5o]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.5o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.5o]\n", 9009999);
	mine = ft_printf("output: [%-10.5o]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.0o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.0o]\n", 9009999);
	mine = ft_printf("output: [%-10.0o]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.15o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.15o]\n", 9009999);
	mine = ft_printf("output: [%-10.15o]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10o]\n", 9009999);
	mine = ft_printf("output: [%-10o]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-.15o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-.15o]\n", 9009999);
	mine = ft_printf("output: [%-.15o]\n", 9009999);
	print_result(orig, mine);

	/* # */
	printf(YELLOW"\nInput: [%%#o] number: [%o]\n"UNCOLOR, 0);
	orig = printf("expect: [%#o]\n", 0);
	mine = ft_printf("output: [%#o]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#o] number: [%o]\n"UNCOLOR, 999);
	orig = printf("expect: [%#o]\n", 999);
	mine = ft_printf("output: [%#o]\n", 999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#o] number: [%o]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#o]\n", 900999);
	mine = ft_printf("output: [%#o]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#.10o] number: [%o]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#.10o]\n", 900999);
	mine = ft_printf("output: [%#.10o]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#10.5o] number: [%o]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#10.5o]\n", 900999);
	mine = ft_printf("output: [%#10.5o]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#5.10o] number: [%o]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#5.10o]\n", 900999);
	mine = ft_printf("output: [%#5.10o]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-10.5o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-10.5o]\n", 9009999);
	mine = ft_printf("output: [%#-10.5o]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-8.8o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-8.8o]\n", 9009999);
	mine = ft_printf("output: [%#-8.8o]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-9.9o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-9.9o]\n", 9009999);
	mine = ft_printf("output: [%#-9.9o]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-7.7o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-7.7o]\n", 9009999);
	mine = ft_printf("output: [%#-7.7o]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-10.10o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-10.10o]\n", 9009999);
	mine = ft_printf("output: [%#-10.10o]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#10.10o] number: [%o]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#10.10o]\n", 9009999);
	mine = ft_printf("output: [%#10.10o]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#.0o] number: [%o]\n"UNCOLOR, 0);
	orig = printf("expect: [%#.0o]\n", 0);
	mine = ft_printf("output: [%#.0o]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%.0o] number: [%o]\n"UNCOLOR, 0);
	orig = printf("expect: [%.0o]\n", 0);
	mine = ft_printf("output: [%.0o]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#.o] number: [%o]\n"UNCOLOR, 0);
	orig = printf("expect: [%#.o]\n", 0);
	mine = ft_printf("output: [%#.o]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%.o] number: [%o]\n"UNCOLOR, 5);
	orig = printf("expect: [%.o]\n", 5);
	mine = ft_printf("output: [%.o]\n", 5);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%o] number: [%o]\n"UNCOLOR, 0);
	orig = printf("expect: [%o]\n", 0);
	mine = ft_printf("output: [%o]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#o] number: [%o]\n"UNCOLOR, 0);
	orig = printf("expect: [%#o]\n", 0);
	mine = ft_printf("output: [%#o]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.5o] number: [%o]\n"UNCOLOR, 25000);
	orig = printf("expect: [%-10.5o]\n", 25000);
	mine = ft_printf("output: [%-10.5o]\n", 25000);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.5o] number: [%o]\n"UNCOLOR, 2500);
	orig = printf("expect: [%-10.5o]\n", 2500);
	mine = ft_printf("output: [%-10.5o]\n", 2500);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.5o] number: [%o]\n"UNCOLOR, 250);
	orig = printf("expect: [%-10.5o]\n", 250);
	mine = ft_printf("output: [%-10.5o]\n", 250);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.5o] number: [%o]\n"UNCOLOR, 25);
	orig = printf("expect: [%-10.5o]\n", 25);
	mine = ft_printf("output: [%-10.5o]\n", 25);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%10.5o] number: [%o]\n"UNCOLOR, 2500);
	orig = printf("expect: [%10.5o]\n", 2500);
	mine = ft_printf("output: [%10.5o]\n", 2500);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%10.5o] number: [%o]\n"UNCOLOR, 250);
	orig = printf("expect: [%10.5o]\n", 250);
	mine = ft_printf("output: [%10.5o]\n", 250);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%10.5o] number: [%o]\n"UNCOLOR, 25);
	orig = printf("expect: [%10.5o]\n", 25);
	mine = ft_printf("output: [%10.5o]\n", 25);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%10.5o] number: [%o]\n"UNCOLOR, 2);
	orig = printf("expect: [%10.5o]\n", 2);
	mine = ft_printf("output: [%10.5o]\n", 2);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%5.o] number: [%o]\n"UNCOLOR, 0);
	orig = printf("expect: [%5.o]\n", 0);
	mine = ft_printf("output: [%5.o]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%5.0o] number: [%o]\n"UNCOLOR, 0);
	orig = printf("expect: [%5.0o]\n", 0);
	mine = ft_printf("output: [%5.0o]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%05o] number: [%o]\n"UNCOLOR, 42);
	orig = printf("expect: [%05o]\n", 42);
	mine = ft_printf("output: [%05o]\n", 42);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.5o] number: [%o]\n"UNCOLOR, 2500);
	orig = printf("expect: [%-10.5o]\n", 2500);
	mine = ft_printf("output: [%-10.5o]\n", 2500);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#.o] number: [%o]\n"UNCOLOR, 42);
	orig = printf("expect: [%#.o]\n", 42);
	mine = ft_printf("output: [%#.o]\n", 42);
	print_result(orig, mine);

	// with flags hh
	unsigned char	c = '5';
	printf(PURPLE"\nhh TEST\n"UNCOLOR);
	printf("hh modifier: converts signed / usigned char into int or unsigned int and the hh makes sure it changes back to char\n");
	compare_results_d_hh(c, 'o');

	c = 'M';
	compare_results_d_hh(c, 'o');

	c = 'a';
	compare_results_d_hh(c, 'o');

	c = 'z';
	compare_results_d_hh(c, 'o');

	c = ' ';
	compare_results_d_hh(c, 'o');

	// with flags h
	unsigned short	shor = 5;
	printf(PURPLE"\nh TEST\n"UNCOLOR);
	printf("h modifier: converts short into int or unsigned int and the h makes sure it changes back to short int or unsigned short int\n");
	compare_results_d_h(shor, 'o');

	shor = -32768;
	compare_results_d_h(shor, 'o');

	shor = 32767;
	compare_results_d_h(shor, 'o');

	shor = 0;
	compare_results_d_h(shor, 'o');

	shor = 1234;
	compare_results_d_h(shor, 'o');

	// with flags l
	unsigned long	lon = 5;
	printf(PURPLE"\nl TEST\n"UNCOLOR);
	printf("l modifier: converts long int into int or unsigned int and the l makes sure it changes back to long int or unsigned long int\n");
	compare_results_d_l(lon, 'o');

	lon = ULONG_MAX;
	compare_results_d_l(lon, 'o');

	lon = 2147483647;
	compare_results_d_l(lon, 'o');

	lon = 0;
	compare_results_d_l(lon, 'o');

	lon = 1234;
	compare_results_d_l(lon, 'o');
	//shouldn't work to put in long max value or min value

	// with flags ll
	unsigned long long	longlong = 5;
	printf(PURPLE"\nll TEST\n"UNCOLOR);
	printf("ll modifier: converts unsigned long long int into int or unsigned int and the ll makes sure it changes back to long int or unsigned unsigned long long int\n");
	compare_results_d_ll(longlong, 'o');

	longlong = ULLONG_MAX;
	compare_results_d_ll(longlong, 'o');

	longlong = 2147483647;
	compare_results_d_ll(longlong, 'o');

	longlong = 0;
	compare_results_d_ll(longlong, 'o');

	longlong = 1234;
	compare_results_d_ll(longlong, 'o');
}

static void	x(void)
{
	int orig;
	int mine;

	// HEXADECIMAL (base 16) INTEGER (small characters)
	int	number = 0x5;
	printf("\nInput: [%x]\n", number);
	compare_results_d(number, 'x');

	number = 0x7fffffff;
	printf("\nInput: [%x]\n", number);
	compare_results_d(number, 'x');

	number = -0x7fffffff;
	printf("\nInput (neg): [%x]\n", number);
	compare_results_d(number, 'x');

	number = 2147483647;
	printf("\nInput: [%d]\n", number);
	compare_results_d(number, 'x');

	number = -2147483648;
	printf("\nInput (neg): [%d]\n", number);
	compare_results_d(number, 'x');

	number = -0x1234;
	printf("\nInput (neg): [%x]\n", number);
	compare_results_d(number, 'x');

	number = 0x1234;
	printf("\nInput: [%x]\n", number);
	compare_results_d(number, 'x');

	number =64;
	printf("\nInput: [%d]\n", number);
	compare_results_d(number, 'x');

	number = -64;
	printf("\nInput (neg): [%d]\n", number);
	compare_results_d(number, 'x');

	number = -0x0;
	printf("\nInput: [%x]\n", number);
	compare_results_d(number, 'x');

	number = 10;
	printf("\nInput: [%d]\n", number);
	compare_results_d(number, 'x');

	number = -10;
	printf("\nInput (neg): [%d]\n", number);
	compare_results_d(number, 'x');

	/* space */
	printf(YELLOW"\nInput: [%% x] number: [%x] UNDEFINED BEHAVIOUR\n"UNCOLOR, 900999);
	orig = printf("expect: [%x]\n", 900999);
	mine = ft_printf("output: [% x]\n", 900999);
	print_result(orig, mine);

	/* - */
	printf(YELLOW"\nInput: [%%-010x] number: [%x]\n"UNCOLOR, 900999);
	orig = printf("expect: [%-10x]\n", 900999);
	mine = ft_printf("output: [%-010x]\n", 900999);
	print_result(orig, mine);

	/* + */
	printf(YELLOW"\nInput: [%%+x] number: [%x] UNDEFINED BEHAVIOUR\n"UNCOLOR, 900999);
	orig = printf("expect: [%x]\n", 900999);
	mine = ft_printf("output: [%+x]\n", 900999);
	print_result(orig, mine);

	/* WIDTH */
	printf(YELLOW"\nInput: [%%100x] number: [%x]\n"UNCOLOR, 900999);
	orig = printf("expect: [%100x]\n", 900999);
	mine = ft_printf("output: [%100x]\n", 900999);
	print_result(orig, mine);

	/* PRECISION */
	printf(YELLOW"\nInput: [%%.5x] number: [%x]\n"UNCOLOR, 900999);
	orig = printf("expect: [%.5x]\n", 900999);
	mine = ft_printf("output: [%.5x]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%.10x] number: [%x]\n"UNCOLOR, 900999);
	orig = printf("expect: [%.10x]\n", 900999);
	mine = ft_printf("output: [%.10x]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%10.5x] number: [%x]\n"UNCOLOR, 900999);
	orig = printf("expect: [%10.5x]\n", 900999);
	mine = ft_printf("output: [%10.5x]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.5x] number: [%x]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.5x]\n", 9009999);
	mine = ft_printf("output: [%-10.5x]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.0x] number: [%x]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.0x]\n", 9009999);
	mine = ft_printf("output: [%-10.0x]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.15x] number: [%x]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.15x]\n", 9009999);
	mine = ft_printf("output: [%-10.15x]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10x] number: [%x]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10x]\n", 9009999);
	mine = ft_printf("output: [%-10x]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-.15x] number: [%x]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-.15x]\n", 9009999);
	mine = ft_printf("output: [%-.15x]\n", 9009999);
	print_result(orig, mine);

	/* # */
	printf(YELLOW"\nInput: [%%#x] number: [%x]\n"UNCOLOR, 0);
	orig = printf("expect: [%#x]\n", 0);
	mine = ft_printf("output: [%#x]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#x] number: [%x]\n"UNCOLOR, 999);
	orig = printf("expect: [%#x]\n", 999);
	mine = ft_printf("output: [%#x]\n", 999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#x] number: [%x]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#x]\n", 900999);
	mine = ft_printf("output: [%#x]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#.10x] number: [%x]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#.10x]\n", 900999);
	mine = ft_printf("output: [%#.10x]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#10.5x] number: [%x]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#10.5x]\n", 900999);
	mine = ft_printf("output: [%#10.5x]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#5.10x] number: [%x]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#5.10x]\n", 900999);
	mine = ft_printf("output: [%#5.10x]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-10.5x] number: [%x]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-10.5x]\n", 9009999);
	mine = ft_printf("output: [%#-10.5x]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-8.8x] number: [%x]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-8.8x]\n", 9009999);
	mine = ft_printf("output: [%#-8.8x]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-9.9x] number: [%x]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-9.9x]\n", 9009999);
	mine = ft_printf("output: [%#-9.9x]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-7.7x] number: [%x]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-7.7x]\n", 9009999);
	mine = ft_printf("output: [%#-7.7x]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%010x] number: [%X]\n"UNCOLOR, 542);
	orig = printf("expect: [%010x]\n", 542);
	mine = ft_printf("output: [%010x]\n", 542);
	print_result(orig, mine);

	// with flags hh
	unsigned char	c = '5';
	printf(PURPLE"\nhh TEST\n"UNCOLOR);
	printf("hh modifier: converts signed / usigned char into int or unsigned int and the hh makes sure it changes back to char\n");
	compare_results_d_hh(c, 'x');

	c = 'M';
	compare_results_d_hh(c, 'x');

	c = 'a';
	compare_results_d_hh(c, 'x');

	c = 'z';
	compare_results_d_hh(c, 'x');

	c = ' ';
	compare_results_d_hh(c, 'x');

	// with flags h
	short int	shor = 5;
	printf(PURPLE"\nh TEST\n"UNCOLOR);
	printf("h modifier: converts short into int or unsigned int and the h makes sure it changes back to short int or unsigned short int\n");
	compare_results_d_h(shor, 'x');

	shor = -32768;
	compare_results_d_h(shor, 'x');

	shor = 32767;
	compare_results_d_h(shor, 'x');

	shor = 0;
	compare_results_d_h(shor, 'x');

	shor = 1234;
	compare_results_d_h(shor, 'x');

	// with flags l
	long int	lon = 5;
	printf(PURPLE"\nl TEST\n"UNCOLOR);
	printf("l modifier: converts long int into int or unsigned int and the l makes sure it changes back to long int or unsigned long int\n");
	compare_results_d_l(lon, 'x');

	lon = ULONG_MAX;
	compare_results_d_l(lon, 'x');

	lon = 2147483647;
	compare_results_d_l(lon, 'x');

	lon = 0;
	compare_results_d_l(lon, 'x');

	lon = 1234;
	compare_results_d_l(lon, 'x');
	//shouldn't work to put in long max value or min value

	// with flags ll
	long long int	longlong = 5;
	printf(PURPLE"\nll TEST\n"UNCOLOR);
	printf("ll modifier: converts long long int into int or unsigned int and the ll makes sure it changes back to long int or unsigned long long int\n");
	compare_results_d_ll(longlong, 'x');

	longlong = ULLONG_MAX;
	compare_results_d_ll(longlong, 'x');

	longlong = 2147483647;
	compare_results_d_ll(longlong, 'x');

	longlong = 0;
	compare_results_d_ll(longlong, 'x');

	longlong = 1234;
	compare_results_d_ll(longlong, 'x');
}

static void	X(void)
{
	int orig;
	int mine;

	// HEXADECIMAL (base 16) INTEGER (big characters)
	int	number = 0x5;
	printf("\nInput: [%x]\n", number);
	compare_results_d(number, 'X');

	number = 0x7fffffff;
	printf("\nInput: [%x]\n", number);
	compare_results_d(number, 'X');

	number = -0x7fffffff;
	printf("\nInput (neg): [%x]\n", number);
	compare_results_d(number, 'X');

	number = 2147483647;
	printf("\nInput: [%d]\n", number);
	compare_results_d(number, 'X');

	number = -2147483648;
	printf("\nInput (neg): [%d]\n", number);
	compare_results_d(number, 'X');

	number = -0x1234;
	printf("\nInput (neg): [%x]\n", number);
	compare_results_d(number, 'X');

	number = 0x1234;
	printf("\nInput: [%x]\n", number);
	compare_results_d(number, 'X');

	number =64;
	printf("\nInput: [%d]\n", number);
	compare_results_d(number, 'X');

	number = -64;
	printf("\nInput (neg): [%d]\n", number);
	compare_results_d(number, 'X');

	number = -0x0;
	printf("\nInput: [%x]\n", number);
	compare_results_d(number, 'X');

	number = 10;
	printf("\nInput: [%d]\n", number);
	compare_results_d(number, 'X');

	number = -10;
	printf("\nInput (neg): [%d]\n", number);
	compare_results_d(number, 'X');

	/* space */
	printf(YELLOW"\nInput: [%% X] number: [%X] UNDEFINED BEHAVIOUR\n"UNCOLOR, 900999);
	orig = printf("expect: [%X]\n", 900999);
	mine = ft_printf("output: [% X]\n", 900999);
	print_result(orig, mine);

	/* - */
	printf(YELLOW"\nInput: [%%-010X] number: [%X]\n"UNCOLOR, 900999);
	orig = printf("expect: [%-10X]\n", 900999);
	mine = ft_printf("output: [%-010X]\n", 900999);
	print_result(orig, mine);

	/* + */
	printf(YELLOW"\nInput: [%%+X] number: [%X] UNDEFINED BEHAVIOUR\n"UNCOLOR, 900999);
	orig = printf("expect: [%X]\n", 900999);
	mine = ft_printf("output: [%+X]\n", 900999);
	print_result(orig, mine);

	/* WIDTH */
	printf(YELLOW"\nInput: [%%100X] number: [%X]\n"UNCOLOR, 900999);
	orig = printf("expect: [%100X]\n", 900999);
	mine = ft_printf("output: [%100X]\n", 900999);
	print_result(orig, mine);

	/* PRECISION */
	printf(YELLOW"\nInput: [%%.5X] number: [%X]\n"UNCOLOR, 900999);
	orig = printf("expect: [%.5X]\n", 900999);
	mine = ft_printf("output: [%.5X]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%.10X] number: [%X]\n"UNCOLOR, 900999);
	orig = printf("expect: [%.10X]\n", 900999);
	mine = ft_printf("output: [%.10X]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%10.5X] number: [%X]\n"UNCOLOR, 900999);
	orig = printf("expect: [%10.5X]\n", 900999);
	mine = ft_printf("output: [%10.5X]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.5X] number: [%X]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.5X]\n", 9009999);
	mine = ft_printf("output: [%-10.5X]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.0X] number: [%X]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.0X]\n", 9009999);
	mine = ft_printf("output: [%-10.0X]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10.15X] number: [%X]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10.15X]\n", 9009999);
	mine = ft_printf("output: [%-10.15X]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-10X] number: [%X]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-10X]\n", 9009999);
	mine = ft_printf("output: [%-10X]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%-.15X] number: [%X]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%-.15X]\n", 9009999);
	mine = ft_printf("output: [%-.15X]\n", 9009999);
	print_result(orig, mine);

	/* # */
	printf(YELLOW"\nInput: [%%#X] number: [%X]\n"UNCOLOR, 0);
	orig = printf("expect: [%#X]\n", 0);
	mine = ft_printf("output: [%#X]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#X] number: [%X]\n"UNCOLOR, 000);
	orig = printf("expect: [%#X]\n", 000);
	mine = ft_printf("output: [%#X]\n", 000);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#X] number: [%X]\n"UNCOLOR, 999);
	orig = printf("expect: [%#X]\n", 999);
	mine = ft_printf("output: [%#X]\n", 999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#X] number: [%X]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#X]\n", 900999);
	mine = ft_printf("output: [%#X]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#.10X] number: [%X]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#.10X]\n", 900999);
	mine = ft_printf("output: [%#.10X]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#10.5X] number: [%X]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#10.5X]\n", 900999);
	mine = ft_printf("output: [%#10.5X]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#5.10X] number: [%X]\n"UNCOLOR, 900999);
	orig = printf("expect: [%#5.10X]\n", 900999);
	mine = ft_printf("output: [%#5.10X]\n", 900999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-10.5X] number: [%X]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-10.5X]\n", 9009999);
	mine = ft_printf("output: [%#-10.5X]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-8.8X] number: [%X]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-8.8X]\n", 9009999);
	mine = ft_printf("output: [%#-8.8X]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-9.9X] number: [%X]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-9.9X]\n", 9009999);
	mine = ft_printf("output: [%#-9.9X]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#-7.7X] number: [%X]\n"UNCOLOR, 9009999);
	orig = printf("expect: [%#-7.7X]\n", 9009999);
	mine = ft_printf("output: [%#-7.7X]\n", 9009999);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#08X] number: [%X]\n"UNCOLOR, 42);
	orig = printf("expect: [%#08X]\n", 42);
	mine = ft_printf("output: [%#08X]\n", 42);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#00X] number: [%X]\n"UNCOLOR, 42);
	orig = printf("expect: [%#00X]\n", 42);
	mine = ft_printf("output: [%#00X]\n", 42);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#8X] number: [%X]\n"UNCOLOR, 42);
	orig = printf("expect: [%#8X]\n", 42);
	mine = ft_printf("output: [%#8X]\n", 42);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#0X] number: [%X]\n"UNCOLOR, 42);
	orig = printf("expect: [%#0X]\n", 42);
	mine = ft_printf("output: [%#0X]\n", 42);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%0X] number: [%X]\n"UNCOLOR, 42);
	orig = printf("expect: [%0X]\n", 42);
	mine = ft_printf("output: [%0X]\n", 42);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#.X] number: [%X]\n"UNCOLOR, 0);
	orig = printf("expect: [%#.X]\n", 0);
	mine = ft_printf("output: [%#.X]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%#.0X] number: [%X]\n"UNCOLOR, 0);
	orig = printf("expect: [%#.0X]\n", 0);
	mine = ft_printf("output: [%#.0X]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%.X] number: [%X]\n"UNCOLOR, 0);
	orig = printf("expect: [%.X]\n", 0);
	mine = ft_printf("output: [%.X]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%.0X] number: [%X]\n"UNCOLOR, 0);
	orig = printf("expect: [%.0X]\n", 0);
	mine = ft_printf("output: [%.0X]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%5.X] number: [%X]\n"UNCOLOR, 0);
	orig = printf("expect: [%5.X]\n", 0);
	mine = ft_printf("output: [%5.X]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%5.0X] number: [%X]\n"UNCOLOR, 0);
	orig = printf("expect: [%5.0X]\n", 0);
	mine = ft_printf("output: [%5.0X]\n", 0);
	print_result(orig, mine);

	printf(YELLOW"\nInput: [%%010X] number: [%X]\n"UNCOLOR, 542);
	orig = printf("expect: [%010X]\n", 542);
	mine = ft_printf("output: [%010X]\n", 542);
	print_result(orig, mine);

	// with flags hh
	unsigned char	c = '5';
	printf(PURPLE"\nhh TEST\n"UNCOLOR);
	printf("hh modifier: converts signed / usigned char into int or unsigned int and the hh makes sure it changes back to char\n");
	compare_results_d_hh(c, 'X');

	c = 'M';
	compare_results_d_hh(c, 'X');

	c = 'a';
	compare_results_d_hh(c, 'X');

	c = 'z';
	compare_results_d_hh(c, 'X');

	c = ' ';
	compare_results_d_hh(c, 'X');

	// with flags h
	short int	shor = 5;
	printf(PURPLE"\nh TEST\n"UNCOLOR);
	printf("h modifier: converts short into int or unsigned int and the h makes sure it changes back to short int or unsigned short int\n");
	compare_results_d_h(shor, 'X');

	shor = -32768;
	compare_results_d_h(shor, 'X');

	shor = 32767;
	compare_results_d_h(shor, 'X');

	shor = 0;
	compare_results_d_h(shor, 'X');

	shor = 1234;
	compare_results_d_h(shor, 'X');

	// with flags l
	long int	lon = 5;
	printf(PURPLE"\nl TEST\n"UNCOLOR);
	printf("l modifier: converts long int into int or unsigned int and the l makes sure it changes back to long int or unsigned long int\n");
	compare_results_d_l(lon, 'X');

	lon = 125425;
	compare_results_d_l(lon, 'X');

	lon = ULONG_MAX;
	compare_results_d_l(lon, 'X');

	lon = 0;
	compare_results_d_l(lon, 'X');

	lon = 1234;
	compare_results_d_l(lon, 'X');
	//shouldn't work to put in long max value or min value

	// with flags ll
	unsigned long long	longlong = 5;
	printf(PURPLE"\nll TEST\n"UNCOLOR);
	printf("ll modifier: converts long long int into int or unsigned int and the ll makes sure it changes back to long int or unsigned long long int\n");
	compare_results_d_ll(longlong, 'X');

	longlong = 125411;
	compare_results_d_ll(longlong, 'X');

	longlong = ULLONG_MAX;
	compare_results_d_ll(longlong, 'X');

	longlong = 0;
	compare_results_d_ll(longlong, 'X');

	longlong = 1234;
	compare_results_d_ll(longlong, 'X');
}

int main(void)
{

	printf(PURPLE"\n-------\n\n"UNCOLOR);
	printf(PURPLE"octal (base 8) integer test\n"UNCOLOR);
	o();

	printf(PURPLE"\n-------\n\n"UNCOLOR);
	printf(PURPLE"hexadecimal (base 16) integer (small char) test\n"UNCOLOR);
	x();

	printf(PURPLE"\n-------\n\n"UNCOLOR);
	printf(PURPLE"hexadecimal (base 16) integer (big char) test\n"UNCOLOR);
	X();
}
